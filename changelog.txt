<li> Integrierte Schaltung der beiden Solarlader, WebSocketServer als WebCom gekapselt
<li> Errormodus wird bei fehlenden SBMS-Paketen nun wieder aktiviert.    
<li> Interruptbehandlung (Taster) wieder akiviert.  
<li> Wenn debug sread nur ausgeben, wenn Inhalt vorhanden.  
<li> Fix input Pullup fuer Taster auf GPIO19.
<li> Acebutton und ButtonConfig zur Entprellung einsetzen.
<li> ToggleCharger-Methoden.
<li> S1 / S2 nun manuell zu schalten.     
<li> Initmeldungen, wenn neuer Client connected sollte nicht an alle gehen. 
<li> Initmeldungen fuer debug/debug2 an neue Clients. 
<li> Einbinden von JSON zwischen Server -> Client.
<li> Automatisches Ein-/Ausschalten der Charger.
<li> OTA-Updaterklasse uebernommen, Hauptklasse aufgeraeumt.
<li> Debugausgabe Wirkleistung/Lieferung in Webbrowser (d2).
<li> OTAUpdater mit Debugsettings ueber d2.
<li> ESP32OTA kann nun auf vars (debug2 und udp) zugreifen, update geht (vorher Reset empfehlenswert!).
<li> Werden S1 oder S2 ueber SMA.cpp geschaltet, muss s1 an, s2 aus etc. uebermittelt werden.
<li> Globale Objekte mit global.h.
<li> Variablenupdats nun nur noch mittels JSon
<li> Moeglichkeit, WiFi mittels 'restart wifi' ueber serielle Schnittstelle zu restarten     
<li> Wifi restartet, wenn 10s kein UDP-Paket des SMA-Energymeters empfangen wurde
<li> Umstellung auf AsyncWebserver inkl. Async OTA
<li>OTA.h/OTA.cpp mit ESP32OTA.h/ESP32OTA.cpp verschmolzen
<li>Vars.h in global.h ueberfuehrt, updaterui.h und webpage.h in html.h konsolidiert
<li>Eigene IP in JavaScript mit location.host auslesen und verwenden
<li>Battery.h/.cpp in wechselrichter.h/.cpp ueberfuehrt
<li>Methoden starteBatterie und starteWechselrichter in inverter-Klasse uebernommen
<li>Websocket-Eventhandler ueber Wrappermethode in WebCom verschoben
<li>SOC-Variable und cv (cell voltages) in global.h/.cpp uebernommen
<li>OTA mit Reporting und Abschlusseite (OK/Failed) geht jetzt
<li>Funktion readSBMS nun in SBMS.h/.cpp
<li>Authentifizierung fuer ESPOTA und AsyncWebserver (auskommentiert), Zugriff ueber / statt /sbms
<li>Ein Schaltvorgang auf s1 und s2 sollte maximal alle 60s erlaubt werden.
<li>checkValues mit led-Methoden in Inverterklasse verlegt.
<li>Code zum behandeln des Inverter-Toggle-Tasters in Inverterklasse verlegt
<li>Nun 60s, bis WiFi wieder aufgebaut wird (UDP miss)
<li>Feld fuer Lieferung / Bezug anzeigen
<li>SBMS-Daten werden nun auch per JSon uebermittelt
<li>Webseite aufraeumen. Doppelklick auf Dbg1/Dbg2 leitet auf Updateseite, erfolgr. Update nach 3s zur SBMS-Seite
<li>Low-Meter von 20% auf 30% geaendert, statt 110AH nun 100AH, Lieferung Schriftformatierung
<li>NTPClient zugefuegt, um im inverter.check() ein automatische Schaltung des Verbrauchs zu ermoeglichen
<li>Zwischen 20 Uhr und 5 Uhr morgens Batteriebetrieb versuchen (nur wenn state of charge > limit)
<li>Staendige Datumsanzeige in der Webseite
<li>Fehler in 0.9.9.30 saugte Batterie leer, solange SOC_LIMIT OK, ignorierte aber Zelleinzelspannungen
<li>Aut. WiFi reconnect ging nicht, darum erstmal herausgenommen (SMA.cpp); Update-Site aus Location beruecksichtigt 
<li>Schaltschwelle CV low von 2850mV auf 3000mV erhoeht (spaeter weiter auf 3100 mit 0.9.9.38)
<li>Hysterese fuer SOC_LIMIT (SOC_HYST mit 5%) hinzugefuegt
<li>0.9.9.36: 100mV Hysterese bei Zellspannungen verhindert automatisches Anschalten bei Leerlauf
<li>0.9.9.37: Faellt die Spannung einer Zelle auf <2,7V, dann wird der Lader S2 f&uuml;r 5Min aktiviert     
<li>0.9.9.38: Weitere Modularisierung mit Charger und Batteryklasse, bei niedriger CV nun start S2 fuer jeweils 5Min.
<li>0.9.9.39: Nun statt Wifi-Reset sma.reset (udp reinit); Fixed Fehler, es wurden nur 7 Zellen ueberwacht
<li>0.9.9.40: Relais 3+4 verdrahtet, Umstrukturierung, mit Relais 4 werden nun die Luefter geschaltet
<li>0.9.9.41: Batterie erst wieder moeglich, wenn Zellspannungen LOW_VOLTAGE_MILLIS + CV_HYST (3150mV) betragen
<li>0.9.9.42: SBMS-Temperatur wird ausgelesen und verhindert ab 40 Grad Celsius ein Abschalten der Luefter
<li>0.9.9.43: Immer, wenn seit dem letzten Restart mehr als 5h vergangen sind (Ausnahme: 0Uhr-Uebergang), wird ESP.resta  rt() ausgeloest
<li>0.9.9.44: Da das Relais zum Charger S1 (HLG600, 600W) ausgewechselt werden musste, wird S1 nun seltener geschaltet (10min statt 60s)
<li>0.9.9.45: Zellspannungsdifferenzen Min-Max werden wieder richtig angezeigt
<li>0.9.9.46: Auswertung Webseite ging nur bis Zelle 7, Notladungsautomatik in battery.cpp schaltete S2 nach 5 Minuten immer wieder ab
<li>0.9.9.47: Min-/Maxzellspannung um einen Index versetzt; Seit 0.9.9.45 Fehler bei PV1 und PV2 Poweranzeige (weil eigentlich Zellspannungen 2/3)
<li>0.9.9.48: Ueber das freie Relais RELAY_3 zum Remote ON/OFF von S1
<li>0.9.9.49: Charger S1 isChargerOn wurde nicht korrekt abgefragt. Hier wurde nach erstmaligem einschalten immer isOn gemeldet, obwohl S1 off war. Temp Limit Luefter 40->35
<li>0.9.9.50: (1) Die fuer beide Lader zustaendige Methode charger.isOn hat Relais_3 (HLG600 nicht beruecksichtigt), der Charger S1 (R3) konnte nicht abgeschaltet werden, da R3 auf LOW statt auf HIGH geschaltet wurde.
<li>0.9.9.50: (2) Ist noch ein Lader an, aber der StateOfCharge >=99% und die Temperatur <35 Grad, schalte die Luefter ab
<li>0.9.9.51: Statt wie bei S1 mind. 60s Idle zu bleiben, kann S2 nun schon nach 30s wieder aktiv geschaltet werden
<li>0.9.9.52: Wird Luefter wegen Soc und Temp abgeschaltet, dann sollte dies nur einmal erfolgen und danach das Flag fansRunning beachtet werden
<li>0.9.9.53: (1) Version 51,52 (nach .48) haben Charger nicht mehr geschaltet; in charger.cpp war an 3 Stellen die statt isChargerOn(nr) nur (nr) verblieben; Debug2 ueberarbeitet.
<li>0.9.9.53: (2) Beide Charger wurden erst nach ihrerer minimalen Ruhezeit gestartet (S1==10min, S2==30s), dies wird beim ersten Mal umgangen. S1 Ruhezeit von 10min auf 60s verringert.
<li>0.9.9.54: (1) Moeglichkeit testFixed (Datasimulation SBMS120) zu aktivieren.
<li>0.9.9.54: (2) Moeglichkeit, bei test==on die pwm-Werte von gpio05/25/26 zu setzen.
<li>0.9.9.55: Beruecksichtigen, dass S2 nun auch 600W liefert, Umschaltzeiten etwas dehnen; ArduinoJson6
<li>0.9.9.56: Sind die Lader aktiv, der Ladestand ist aber >=99%, schalte die Luefter nicht ein (sondern ab)
<li>0.9.9.57: LastHourRestart wurde nie verwendet, da immer -1 und damit <0, jetzt wird jeden Morgen gegen 5 neu gestartet
<li>0.9.9.58: Restart um 6,
<li>0.9.9.59: Schalte Luefter NUR ein, wenn Temperatur ueber 35Â°C (battery.cpp), Git-Upd ESP32 Libs, Kompilat damit 844 statt 841 gross
<li>0.9.9.60: GIIO5 schaltet nun per PWM den HLG600B von 0..546W (charger.cpp, calculateDc)
<li>0.9.9.61: Der mit 0.9.9.58 eingerf&uuml;hrte Restart muss auf die Stunde UND die Minute eingeschraenkt sein, da sonst eine Stunde neu gestartet wird
<li>0.9.9.62: Die Methode charger.checkOnIncome() sollte nur noch maximal alle CHECK_INCOME_MIN_INTERVAL_MILLIS laufen
<li>0.9.9.63: Eine DC-Berchnung sollte auch den aktuellen Wert des Ladestroms mit inkludieren
<li>0.9.9.65: Ein favicon.ico wird nun &uuml;ber SPIFFS geserved
<li>0.9.9.66: Fehler in charger.cpp verhinderte Abschaltung von S1 (HLG600A), wenn netto negativ     
<li>0.9.9.67: Pruefinterval SOC und Zellspannungen von 3 auf 10s erhoeht    
<li>0.9.9.68: Skipmeldungen nur auf Serial, nicht WS, Html-Konsolenlogging mit append, nicht mit innerHtml (Seite steht sonst nach einigen hundert Zeilen)      
<li>0.9.9.69: Ist Netto positiv, aber der Inverter laeuft, sollte dieser gestoppt werden, BEVOR die Charger geschaltet werden  
<li>0.9.9.70: Beim Schalten des Netzvorrangs einen Offset von 100W Lieferung beachten (wenn weniger als 100W, dann wird Batterie nicht abgeschaltet)       
<li>0.9.9.71: S1 vor S2 bewerten und schalten. Damit l&auml;sst muss der Nettoabzug (600W) nicht mehr berechnet werden, S2 ist immer als Tuning der Lieferung vorhanden, nicht nur zwischen 0...600W.
<li>0.9.9.72: Vor der Bewertung (charger.checkOnIncome) f&uuml;r S1 und S2 sollte geprueft werden, ob die Batterie genutzt wird (Upload geht NICHT, SBMS einlesen auch nicht; Was hat sich hier ge&auml;ndert?; => hier war sbms.readSbms();  auskommentiert!)
<li>0.9.9.73: <Wrover-B> Switch auf Wrover-B, wo SBMS-In(RX2) auf GPIO16 nicht belegt und auf Platinenr&uuml;ckseite auf GPIO15 umgelegt werden muss. Wird da eine Br&uuml;cke zwischen GPIO15 und GPIO16 gelegt, m&uuml;ssten beide Chips arbeiten. (Upload kein Binary)
<li>0.9.9.74: <Wroom> isAlive Url geschaltet: /lbprobe liefert 'online', Rollback 0.9.9.72 (charger.cpp), es darf auch im Batterieberieb geladen werden (Upload kein Binary)
<li>0.9.9.75: Loop0-Taskmethode integriert, um bisher ungenutzten Core zu nutzen (Upload kein Binary)
<li>0.9.9.76: Beginn der Steuerung der Teslaladeregelung, Tesla.h und Tesla.cpp hinzugefuegt, Status, Wakeup, Ladestart und Ladestop, alles implementiert, aber noch nicht angesteuert (Upload geht, SBMS einlesen aber nicht mehr => hier war sbms.readSbms();  auskommentiert!)
<li>0.9.9.77: Verschiedene Optimierungen wg. Stringnutzung, Changelog wurde in html.h verlegt; Anhebung des Uploadmaximums fuer OTA-Sketches von 1048576 auf 1248576. Das zul&auml;ssige Maximum sollte noch bestimmt werden.
<li>0.9.9.78: Der mit 0.9.9.58 eingef&uuml;hrte ESP.restart() um 06:00 morgens wird wieder herausgenommen.
<li>0.9.9.79: In charger.cpp wurde nun die Tesla-Ladesteuerung aktiviert, bei >500 und allen Ladern an wird nun versucht, den Ladevorgang zu starten, bei <-1000W wird gestoppt. Minimale Schaltzeit ist 5Min.
<li>0.9.9.80: Beim startCharge wird nun zwischen Limitsetzung und Chartstart 8s statt 5s gewartet. Eine Schaltung bedingt nun ausserdem mindestens 10 positive Messungen.
<li>0.9.9.81: Tesla Chargestate zeichnet nun die wichtigsten Gr&ouml;ssen auf.
<li>0.9.9.82: Anfang eines GUI-Controls (Web) um die Teslasteuerung ein-/bzw. auszuschalten
<li>0.9.9.83: (1) Das Flag teslaCtrlActive wird nun permanent im SPIFFS abgelegt
<li>0.9.9.83: (2) Die Konfiguration wird nun lokal im CFG vorgehalten, Konfig nun &uuml;ber Kommandozeile speicherbar
<li>0.9.9.83: (3) Commandline auf Task0
<li>0.9.9.83: (4) Add Try-Catch in Webseite bei SBMS-Verarbeitung
<li>0.9.9.83: (5) Nach setzen des Testdatenschalters wird UI aktualisiert
<li>0.9.9.83: (6) Debug / Debug2 werden nun auch per JSon aus der Webansicht aktualisiert (aber nicht im SPIFFS abgespeichert)
<li>0.9.9.83: (7) S1,S2 und Netzvorrang werden nun ueber Json aktualisiert, alter Benachrichtigungscode bereinigt, S1 und S2 sind nun als symbolische Links integriert
<li>0.9.9.83: (8) Der mit 0.9.9.78 ausgeplante Restart ging einher mit dem Abschalten des Batterievorrangs ab 06 Uhr (wechselrichter.cpp); &Auml;nderung: 6Uhr->9Uhr
<li>0.9.9.83: (9) Das RELAY_S1 wird nun im Setup geschaltet. Nur das RELAY_3 bestimmt noch (ueber Remote) den Zustand des Chargers S1 (HLG600A)
<li>0.9.9.84: (1) Der Aufruf der Upgradeseite erfolgt - beim Aufruf von der Homepage - nun mit dem internen DNS-Namen http://sbms/update
<li>0.9.9.84: (2) Hintergrundfarben der deaktivierten Buttons S1,S2 etc angepasst.
<li>0.9.9.84: (3) Auskunftsfenstern div:id='teslaout' hinzugef&uuml;gt.
<li>0.9.9.84: (4) Die L&uuml;fter sollten laufen, solange die Grenztemperatur nicht um 2 Grand unterschritten wurde (TEMP_THRESHOLD_HIGH/_LOW) (verhindert Relayklickmarathon) 
<li>0.9.9.84: (5) Fehlermeldung fixed: 'Cannot process data: Connect Wed Jul 24 2019 10:17:46 GMT+0200 (Mitteleurop&auml;ische Sommerzeit)' (aus onopen-Event in Webseite; jetzt nur noch lokal).
<li>0.9.9.84: (6) Moeglichkeit geschaffen, &uuml;ber die Kommandozeile Konfigwerte zu setzen (um sie dann mit einem config.save) sp&auml;ter speichern zu k&ouml;nnen. 
<li>0.9.9.84: (7) Wird ein Tesla-Statusupdate empfangen, dann wurde die maximale Nachrichtengroesse von 300Byte ueberschritten (392), Max wurde nun auf 512 erh&uuml;ht
<li>0.9.9.84: (8) Fehler bei Namen WakeUp-Button behoben, Styling, 'teslaout' wird nun bef&uuml;llt.
<li>0.9.9.85: (1) Free heap Anzeige, nur bei Debug2 (online), Hinzu kommmt heap fragmentation und max available block size (command line und online)
<li>0.9.9.85: (2) Implementierung eines Mechanismus' der verhindert, dass der Server immer dieselben Teslastatusdaten sendet
<li>0.9.9.85: (3) Einige yield()s hinzugefuegt, viele String-Optimierungen
<li>0.9.9.85: (4) Bisher wurde beim Laden die L&uuml;fter bei SOC<99 angeschaltet, nun wird dies nur noch bei hoher Temperatur gemacht.
<li>0.9.9.85: (5) Statt Dbg1+Dbg2 als Einzelflags zu regeln, gibt es nun eine Bitleiste auf Server und Client.
<li>0.9.9.85: (6) Steueroption Tesla start/stop charge hinzugef&uuml;gt 
<li>0.9.9.85: (7) Der UDP-Reinitialisierungthreshold wurde von 60s auf 120s angehoben, alle 60s wird nun ein Ping-Paket versendet.
<li>0.9.9.85: (8) Eine Authentifizierungsmethode ist zum Teslaobjekt hinzugekommen um das Bearer-Token erneuern zu k&ouml;nnen.
<li>0.9.9.85: (9) Tesla charge start/stop versuchen nun nicht mehr, das Chargelimit zu setzen. Daf&uuml;r gibt es eine eigene Methode
<li>0.9.9.86: (1) Nach einer Teslastatusabfrage wird 'cs' (charge state) &uuml;bermittelt
<li>0.9.9.86: (2) Weitere yields im Berech des Datenempfangs und der Verarbeitung in WebCom.cpp
<li>0.9.9.86: (3) WebCom.sendJson(key,value) zugef&uuml;gt, auch eine neue Methode WebCom.sendClients(String* msg) gebaut, die das Kopieren des Strings verhindert
<li>0.9.9.86: (4) UpdateUi in html.h sollte nun auch mit Teilantworten zurecht kommen. Das 'cs' (chargeState) kommt nun allein, wenn start/stop charge mit rc==200 erfolgreich
<li>0.9.9.86: (5) Wakeup repariert, der RC wird nun &uuml;bermittelt und gelogged
<li>0.9.9.86: (6) Ein drittes Debugflag 'jsonDebug' erlaubt die Analyse der Server-/Clientkommunikation
<li>0.9.9.87: (1) Es wurden zuviele Debugmessages ohne Debugschalter geschickt (Bitset vom/zum Server)
<li>0.9.9.87: (2) Wird bei aktivem Laden auf dem Ladenbutten geklickt, dann wird das Laden gestoppt. Hier muss bei rc==200 ein Resetz des Schalters erfolgen
<li>0.9.9.87: (3) Schriftgroesse des Konsolenoutputs (Ausgabe GUI) von 0.7em auf 0.6em herabgesetzt, deakt.Buttons hellbraun statt grau
<li>0.9.9.87: (4) Der Statusbutton ist nun rechts neben der Checkbox, zwei neue Buttons (Lim50 und Lim90) wurden vorbereitet, die Statusausgabe 'teslaout' ist 10px schm&auml;ler
<li>0.9.9.87: (5) Bei webcom.updateUi() wird nun immer der letzte Chargingstatus ausgeliefert, nicht nur wenn der Gesamtstatus abgerufen wurde.
<li>0.9.9.87: (6) Aufnahme einer neuen print()-Methode in der Hauptklasse SBMSEsp32, die erst einmal Temperatur und Ladezustand der Batterie ausgibt.
<li>0.9.9.87: (7) Ladestandsanzeiger f&uuml;r den Teslabereich
<li>0.9.9.87: (8) Ein Update des Ladestandes wird nur noch gemacht, wenn rc==200 in perry.readChargeState()
<li>0.9.9.87: (9) Die Buttons Limit50 und Limit90 setzen nun ein Ladelimit von 50 oder 90%. Endet das Kommando mit Rc==200, wird nach 5s noch eine Statusabfrage gemacht (wenn queryTeslaStateAfter = true)
<li>0.9.9.88: (1) Die Wartezeit bis zur Statusabfrage nach Setzen eines Limits wird von 5s auf 10s erhoeht
<li>0.9.9.88: (2) Neues Debugflag 'debugRelais' einbauen, um alle Schaltaktionen von Relais zu dokumentieren; das Ergebnis sollte immer mit log(...) in der Konsole erscheinen (work in progress)
<li>0.9.9.88: (3) Es sollte immer zuerst S1 ausgeschaltet werden, S2 erst dann, wenn 5 Minuten die Lieferung negativ war (S2 regelt selbst herunter bis ca. 1A).
<li>0.9.9.88: (4) Ein wenig umr&auml;umen/optimieren in SMA.cpp/SCM.h 
<li>0.9.9.88: (5) BasisUrl zur Re-Authentifizierung gefixed, wurde ein neues Token geholt, wird es im SPIFFS gesichert.
<li>0.9.9.88: (6) Watchdogtimer abstellen (999s, no panic handler).
<li>0.9.9.88: (7) Fix: Bei der Anforderung, das Teslaladen zu starten, wurde immer ein false &uuml;bermittelt.
<li>0.9.9.88: (8) Die Config konnte nicht gespeichert werden, wenn bei ihrem Laden zum Programmstart ein Fehler passiert war (_configRead=false), dies wurde entfernt.
<li>0.9.9.88: (9) Authentication f&uuml;r Aufrufe &ber /sbms-Kontext von Remote
<li>0.9.9.88: (10) Formatierung des Tesladivs ge&auml;ndert
<li>0.9.9.89: (1) Statt StaticJsonDocument (Inhalt gemischt auf stack) wird in CFG nun DynamicJsonDocument verwendet und dies dann nur noch Methodenlokal.
<li>0.9.9.89: (2) Fix bei der Verwendung des gesch&uuml;tzten Webzugangs, hier war User/Pass f&uuml;r den /sbms-Kontext noch hart kodiert.
<li>0.9.9.89: (3) UDP Ping entfernt (kein Stabilit&auml;tsgewinn)
<li>0.9.9.89: (4) Statt mit bezug+lieferung zu arbeiten und diese auch ins GUI zu liefern, wird nun nur noch json.n = netto verarbeitet.
<li>0.9.9.89: (5) Die Methoden sbms.read() (vorher readSbms) und sma.read() geben nun true im Erfolgsfall zur&uuml;ck, nur dann wird inverter.check() (sbms) bzw. charger.checkOnIncome() ausgef&uuml;hrt.
<li>0.9.9.89: (6) U&uml;ber die Kommandozeile kann der maximale Loglevel angeschaltet werden.
<li>0.9.9.89: (7) Alle UDP-Pakete m&uuml;ssen 600Byte lang sein, das ist nun hart kodiert. Damit wird auch verhindert, dass ein evtl. laengeres Packet den auf 601Byte vorbereiteten Buffer &uuml;berschreiben kann (Crashpotential)
<li>0.9.9.89: (8) Es wird jede Sekunde ein UDP-Paket gelesen, aber nur alle 3s eines ausgewertet, dies wird nun angeglichen (udp auch 3s)
<li>0.9.9.89: (9) Neue Debugflags aufgenommen: debugSma,debugSbms,debugCharger,debugBattery,debugInverter
<li>0.9.9.89: (10) Falsch dokumentierter Timeout in global.cpp wurde in sbms.read() verwendet, um nur alle 10s eine Verarbeitung eines SBMS-Pakets zu triggern: entfernt
<li>0.9.9.90: (1) Im normalen Kontext ('/sbms') konnte der Tesla nicht zugreifen, fixed
<li>0.9.9.90: (2) DebugKonfig aufgenommen (Flag 9), Upgrade 100AH auf 260AH.
<li>0.9.9.90: (3) Nach einem Speichern des SPIFFS config files sollte auch ein flush() und ein close() angeschlossen werden.
<li>0.9.9.90: (4) Wird anfangs kein Netto-Ertragswert per Json geliefert, wird der toFixed(1)-Fehler auf undefined jetzt abgefangen.
<li>0.9.9.90: (5) Laden von User/Pass f&uuml;r den Webzugang repariert
<li>0.9.9.90: (6) Das Setzen von Bitsetvariablen 9 und 10 ging nicht, da Bitset nur 8 Stellen lang initialisiert war (global.cpp) 
<li>0.9.9.90: (7) In der Webseite wurde +r mit +'</br>' ersetzt und optimiert
<li>0.9.9.90: (8) Blockingproblem von sbms.read mit readString() gel&ouml;st
<li>0.9.9.90: (9) Die Anzeige der Werte f&uuml;r Batt, PV1, PV2 etc. wurde um die Spalte der Wh erg&aauml;nzt (zur&uuml;ckgenommen), die gesamte Berechtung im Html vereinfacht.
<li>0.9.9.91: (1) Die neue Read-Funktion verursacht auch fehlerhafte Verarbeitungen mit Zellspannung von 0V, es werden nur noch Paket mit >50 Zeichen angenommen.
<li>0.9.9.91: (2) Weil in Sbms.read() immer wieder falsche Werte (Temperatur 283Â°C) gelesen wurden, wird erst einmal wieder auf Serial1.readString() zur&uuml;ckgestellt
<li>0.9.9.91: (3) Aus SOC_LIMIT wird socLimit, der sich aus der CFG ueberschreiben l&aauml;sst; die Hysterese wird nun von 5 auf 2% heruntergenommen (testen!!!)
<li>0.9.9.91: (4) Formatierung Steuerungsbuttons Tesla in Webseite (rounded, height, position)
<li>0.9.9.91: (5) Fix: socLimit wurde nie in Konfig geschrieben
<li>0.9.9.91: (6) Debug2 ist jetzt 'debugWeb'
<li>0.9.9.91: (7) Bisher wurde S2 erst bei -400W &uuml;ber mehr als 5 Minuten abgeschaltet, nun wurde dies auf 100W heruntergesetzt
<li>0.9.9.91: (8) charger.getRunningMillis arbeitet nun mit long.
<li>0.9.9.91: (9) Laufen S1 und S2 mehr als eine Stunde UND befindet sich der Wechselrichter im Batteriemodus, wird er umgeschaltet in den Netzvorrang
